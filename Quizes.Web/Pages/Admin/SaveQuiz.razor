@page "/admin/add-quiz"
@page "/admin/edit-quiz/{quizId:guid?}"

@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h1>@(IsEditCase ? "Редактирай Тест" : "Добави Тест")</h1>
<hr>

<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Категория</label>
                <InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
                    <option value="">Избери категория</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _quiz.CategoryId" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Име</label>
                <InputText @bind-Value="_quiz.Name" class="form-control" />
                <ValidationMessage For="() => _quiz.Name" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Общо Въпроси</label>
                <InputNumber @bind-Value="_quiz.TotalQuestions" class="form-control" />
                <ValidationMessage For="() => _quiz.TotalQuestions" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Време (в минути)</label>
                <InputNumber @bind-Value="_quiz.TimeInMinutes" class="form-control" />
                <ValidationMessage For="() => _quiz.TimeInMinutes" />
            </div>
        </div>
        <hr />
        <h4 class="">Въпроси</h4>

        <ol>
            @foreach (var q in _quiz.Questions)
            {
                var random = Guid.NewGuid();
                <li class="shadow p-3 mb-3">
                    <textarea @bind="q.Text" class="form-control" rows="3"></textarea>
                    <h6>Отговори</h6>
                    <ol>
                        @foreach (var option in q.Options)
                        {
                            <li class="p-2 mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0"
                                               type="radio"
                                               name="option_radio_@random"
                                               @onchange="() => SetOptionAsCorrectAnswer(q, option)"
                                               checked="@option.IsCorrect">
                                    </div>
                                    <input type="text" class="form-control" @bind="option.Text">
                                    <button class="btn btn-danger" type="button" @onclick="() => q.Options.Remove(option)">X</button>
                                </div>
                            </li>
                        }
                    </ol>
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-info" type="button" @onclick="() => q.Options.Add(new())">+ Добави Отговор</button>
                    </div>
                </li>
            }
        </ol>

        <div class="mt-3 d-flex justify-content-center">
            <button class="btn btn-info" type="button" @onclick="() => _quiz.Questions.Add(GetDefaultEmptyQuestion())">+ Добави Въпрос</button>
        </div>

        <div class="col-sm-4">
            <div class="mb-3">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" />
                    <label class="form-check-label" for="quizIsActive">Активен</label>
                </div>
            </div>
        </div>
        <hr />

        <button class="btn btn-success" type="submit">Запази Тест</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid? QuizId { get; set; }
    private bool IsEditCase => QuizId.HasValue && QuizId.Value != Guid.Empty;
    private QuizSaveDto _quiz = new QuizSaveDto();
    private CategoryDto[] _categories = [];

    protected override async Task OnInitializedAsync()
    {
        if (IsEditCase)
        {
            var quiz = await QuizApi.GetQuizToEditAsync(QuizId!.Value);
            if (_quiz == null)
            {
                await ShowAlertMessageAsync("Тестът не е намерен!");
                NavigationManager.NavigateTo("admin/manage-quizzes");
                return;
            }
            _quiz = quiz;
        }
        else
        {
            var question = GetDefaultEmptyQuestion();
            _quiz.Questions = [question];
        }

        _categories = await CategoryApi.GetCategoriesAsync();
    }

    private void SetOptionAsCorrectAnswer(QuestionDto questionDto, OptionDto optionDto)
    {
        foreach (var option in questionDto.Options)
        {
            option.IsCorrect = false;
        }
        optionDto.IsCorrect = true;
    }

    private QuestionDto GetDefaultEmptyQuestion() => new QuestionDto
        {
            Options = [new(), new()]
        };

    private async Task SaveQuizAsync()
    {
        var errorMessage = _quiz.Validate();
        if (!string.IsNullOrEmpty(errorMessage))
        {
            await ShowAlertMessageAsync(errorMessage);
            return;
        }

        var response = await QuizApi.SaveQuizAsync(_quiz);
        if (response.IsSuccess)
        {
            await ShowAlertMessageAsync("Тестът е успешно добавен!", "Успех");
            _quiz = new QuizSaveDto { Questions = [GetDefaultEmptyQuestion()] }; // Reset the form
        }
        else
        {
            await ShowAlertMessageAsync(response.ErrorMessage!);
            return;
        }

        NavigationManager.NavigateTo("admin/manage-quizzes");
    }

    private async Task ShowAlertMessageAsync(string message, string title = "Грешка")
    {
        await JSRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
    }
}